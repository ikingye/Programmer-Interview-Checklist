<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 自我面试</title>
    <link>https://ikingye.github.io/interview-me/docs/pl/go/</link>
    <description>Recent content in Go on 自我面试</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ikingye.github.io/interview-me/docs/pl/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数据类型</title>
      <link>https://ikingye.github.io/interview-me/docs/pl/go/type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/interview-me/docs/pl/go/type/</guid>
      <description>数据类型 </description>
    </item>
    
    <item>
      <title>关键字</title>
      <link>https://ikingye.github.io/interview-me/docs/pl/go/keyword/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/interview-me/docs/pl/go/keyword/</guid>
      <description>关键字 make, new 有什么区别？  make 返回变量本身 new 返回变量的指针  // The make built-in function allocates and initializes an object of type // slice, map, or chan (only). Like new, the first argument is a type, not a // value. Unlike new, make&amp;#39;s return type is the same as the type of its // argument, not a pointer to it. The specification of the result depends on // the type: //	Slice: The size specifies the length.</description>
    </item>
    
    <item>
      <title>Go Channel</title>
      <link>https://ikingye.github.io/interview-me/docs/pl/go/channel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/interview-me/docs/pl/go/channel/</guid>
      <description>Go Channel </description>
    </item>
    
    <item>
      <title>Goroutine</title>
      <link>https://ikingye.github.io/interview-me/docs/pl/go/goroutine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/interview-me/docs/pl/go/goroutine/</guid>
      <description>Goroutine Goroutine 为什么高效？  Goroutine 如何调度？ 每个线程会都占用 1MB 以上的内存空间，在对线程进行切换时不止会消耗较多的内存，恢复寄存器中的内容还需要向操作系统申请或者销毁对应的资源， 每一次线程上下文的切换都需要消耗约为 1us， 但是 Go 调度器对 Goroutine 的上下文切换约为 0.2us，减少了 80% 的额外开销。
Go 语言的调度器通过使用与 CPU 数量相等的线程减少线程频繁切换的内存开销， 同时在每一个线程上执行额外开销更低的 Goroutine 来降低操作系统和硬件的负载。
参考：
 Go 语言调度器与 Goroutine 实现原理 [译] Go 调度器: M, P 和 G 也谈 goroutine 调度器  </description>
    </item>
    
    <item>
      <title>Go 包管理</title>
      <link>https://ikingye.github.io/interview-me/docs/pl/go/pm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/interview-me/docs/pl/go/pm/</guid>
      <description>Go 包管理 Go 包管理的进化过程是什么样的？  Go 1.4 及之前  所有的依赖包都是存放在 GOPATH 下，没有版本控制   Go 1.5 至 Go 1.10  每个项目的根目录下可以有一个 vendor 目录，里面存放了该项目的依赖的包   Go 1.11 至 Go 1.12  默认使用的还是 GOPATH 的管理方式 运行 export GO111MODULE=on，使用 Go Modules   Go 1.13 及之后  默认使用 Go Modules     你用过哪些 Go 包管理工具，说说它们的优缺点？   golang/dep   Masterminds/glide   kardianos/govendor    Go Mod 相对之前的版本管理有哪些优点？  可以指定版本   Go Mod 如何找到引用的包？ 一般情况：</description>
    </item>
    
    <item>
      <title>Go 版本</title>
      <link>https://ikingye.github.io/interview-me/docs/pl/go/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/interview-me/docs/pl/go/version/</guid>
      <description>Go 版本 </description>
    </item>
    
    <item>
      <title>Go 标准库</title>
      <link>https://ikingye.github.io/interview-me/docs/pl/go/std/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/interview-me/docs/pl/go/std/</guid>
      <description>Go 标准库 </description>
    </item>
    
    <item>
      <title>测试</title>
      <link>https://ikingye.github.io/interview-me/docs/pl/go/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/interview-me/docs/pl/go/test/</guid>
      <description>测试 </description>
    </item>
    
    <item>
      <title>性能</title>
      <link>https://ikingye.github.io/interview-me/docs/pl/go/performance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/interview-me/docs/pl/go/performance/</guid>
      <description>性能 </description>
    </item>
    
  </channel>
</rss>